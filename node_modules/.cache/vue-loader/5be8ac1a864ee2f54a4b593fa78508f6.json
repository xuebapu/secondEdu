{"remainingRequest":"D:\\webStromAllSpace\\secondEdu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\webStromAllSpace\\secondEdu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\webStromAllSpace\\secondEdu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\webStromAllSpace\\secondEdu\\src\\views\\index\\index.vue?vue&type=template&id=498142aa&scoped=true&","dependencies":[{"path":"D:\\webStromAllSpace\\secondEdu\\src\\views\\index\\index.vue","mtime":1612752851747},{"path":"D:\\webStromAllSpace\\secondEdu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webStromAllSpace\\secondEdu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\webStromAllSpace\\secondEdu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\webStromAllSpace\\secondEdu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}